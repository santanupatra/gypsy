// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}


// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}


// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}


// Creates text alignment classes based on screen size
// TODO this would be nice to add to the framework
@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    // Provide text `[text-{bp}]` attributes for aligning text based on screen size
    [text#{$infix}-center] {
      text-align: center;
    }

    [text#{$infix}-left] {
      text-align: left;
    }

    [text#{$infix}-right] {
      text-align: right;
    }

    [hidden#{$infix}-up] {
      display: none;
    }
  }

  @include media-breakpoint-down($breakpoint, $grid-breakpoints) {
    [hidden#{$infix}-down] {
      display: none;
    }
  }
}
@import url('https://fonts.googleapis.com/css?family=Montserrat:100,200,300,400,500,600,700,800,900');
body, ion-app.md, ion-app.ios, h1, button, .toolbar-title, ion-content, .item-md, ion-item,p{font-family: 'Montserrat', sans-serif !important; font-size:14px !important;}
.ml-0{margin-left:0!important}
.mr-0{margin-right:0!important}
.mb-1{margin-bottom:10px!important}
.mb-2{margin-bottom:10px!important}
.mb-3{margin-bottom:30px!important}
.mb-4{margin-bottom:40px!important}
.mb-5{margin-bottom:50px!important}
.mb-half{margin-bottom:5px!important}

.pr-0{padding-right:0 !important}
.pl-0{padding-left:0 !important}

.grey-bg{background:#ededed}

.text-right{text-align:right !important}
.text-center{text-align:center !important}
.button{box-shadow:none!important}

.text-input-ios, .text-input-md{margin: 10px 8px 10px 0}

.d-flex{display:flex !important}

ion-navbar .toolbar-background-md, ion-navbar .toolbar-background-ios{border-color: transparent !important;
  background-color: #c0c0c0 !important;}
.bar-button-default-ios, .bar-button-default.bar-button-ios-default, .bar-button-clear-ios-default{color:#fff}


// left-bar

.left-bar-top-area{
  display: flex;
  align-items: center;
  padding: 20px 10px;
}

.left-top-pic{
  width: 60px;
  height: 60px;
  border-radius: 100%;
  overflow: hidden;
  margin-right: 15px;
}

.left-bar-top-area h5{
  margin: 0;
  color: #fff;
  font-weight: 500;
  margin-bottom: 5px;
}
.left-bar-top-area p{
  margin: 0;
  color: #fff;
}

.left-sidebar-list.list .item-block{
  border-bottom: #e1e1e1 1px solid;
  padding: 6px 16px;
}

.left-sidebar-list.list .item-block .icon{
  color: #555;
}

.left-sidebar-list.list .item-block .item-inner{
  border: none;
  margin-left: 7px;
}

.left-sidebar-list.list .item-block .item-inner .label{
  color: #555;
}

.left-sidebar-list.list .item-block .item-inner{
  background-image: none !important;
}

// .toolbar-title{
//     text-align: center;
//     color: #fff !important;

// }
.toolbar-title {
  display: block;
  overflow: hidden;
  width: 100%;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.toolbar .back-button-text{
  display: none;
}

.custom-segment .segment-button{
    border: none;
    color: #777 !important;
    border-right: #c1c1c1 1px solid;
    border-radius: 0 !important;
    background: #e5e5e5;
    text-transform: uppercase;
     text-overflow: normal; white-space: normal; word-wrap: break-all;
     line-height: 12px !important; padding: 8px 0 5px 0; height: 4rem !important;font-weight: bold;
}
.custom-segment.segment .segment-button.segment-activated{
  background: #f8f8f8;
    color: #ff7301 !important;
    border-right: none;
     text-overflow: normal; white-space: normal; word-wrap: break-all;
}
.grid{
	padding:0 !important;
}
.title{
	font-weight:300 !important;
}
.toolbar{
	padding:0 !important;
}
.left-sidebar-list.list .item-block .icon{margin-top:0;margin-bottom:0}

ion-badge{padding: 3px 5px; }

.left-bar-top-area {
  border-color: transparent !important;
  background-color: #c0c0c0 !important;
}

.toolbar-title-md {
  padding: 0 12px;
  font-size: 2rem;
  font-weight: 500;
  color: #fff;
}

//.footer .toolbar .toolbar-background{background-color: #c94838 !important;}
//.footer .toolbar .row a{color: #fff !important;}
.scroll-content{margin-bottom: 56px;}
.footer .toolbar .toolbar-content .grid .row-bottom .col a:hover{ color: #24beff !important; }











